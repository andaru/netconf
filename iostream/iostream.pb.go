// Code generated by protoc-gen-go. DO NOT EDIT.
// source: iostream.proto

/*
Package iostream is a generated protocol buffer package.

It is generated from these files:
	iostream.proto

It has these top-level messages:
	TransportPDU
*/
package iostream

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type TransportPDU_DataType int32

const (
	TransportPDU_NULL          TransportPDU_DataType = 0
	TransportPDU_DATA_TX       TransportPDU_DataType = 1
	TransportPDU_DATA_TX_CLOSE TransportPDU_DataType = 2
)

var TransportPDU_DataType_name = map[int32]string{
	0: "NULL",
	1: "DATA_TX",
	2: "DATA_TX_CLOSE",
}
var TransportPDU_DataType_value = map[string]int32{
	"NULL":          0,
	"DATA_TX":       1,
	"DATA_TX_CLOSE": 2,
}

func (x TransportPDU_DataType) String() string {
	return proto.EnumName(TransportPDU_DataType_name, int32(x))
}
func (TransportPDU_DataType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

// TransportPDU is a data unit, multiplexed on a transport stream.
type TransportPDU struct {
	// channel ID the data in this PDU is associated with.
	// Implementations typically treat channelID 1 as data, and 2 as error.
	ChannelID int32 `protobuf:"varint,1,opt,name=channelID" json:"channelID,omitempty"`
	// data is the PDU data.
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	// data_type indicates the PDU data type
	DataType TransportPDU_DataType `protobuf:"varint,3,opt,name=data_type,json=dataType,enum=iostream.TransportPDU_DataType" json:"data_type,omitempty"`
}

func (m *TransportPDU) Reset()                    { *m = TransportPDU{} }
func (m *TransportPDU) String() string            { return proto.CompactTextString(m) }
func (*TransportPDU) ProtoMessage()               {}
func (*TransportPDU) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *TransportPDU) GetChannelID() int32 {
	if m != nil {
		return m.ChannelID
	}
	return 0
}

func (m *TransportPDU) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *TransportPDU) GetDataType() TransportPDU_DataType {
	if m != nil {
		return m.DataType
	}
	return TransportPDU_NULL
}

func init() {
	proto.RegisterType((*TransportPDU)(nil), "iostream.TransportPDU")
	proto.RegisterEnum("iostream.TransportPDU_DataType", TransportPDU_DataType_name, TransportPDU_DataType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for IOStream service

type IOStreamClient interface {
	// TransportStream starts a bi-directional, multi-channel streaming
	// transport between the RPC client and the aggregator.
	TransportStream(ctx context.Context, opts ...grpc.CallOption) (IOStream_TransportStreamClient, error)
}

type iOStreamClient struct {
	cc *grpc.ClientConn
}

func NewIOStreamClient(cc *grpc.ClientConn) IOStreamClient {
	return &iOStreamClient{cc}
}

func (c *iOStreamClient) TransportStream(ctx context.Context, opts ...grpc.CallOption) (IOStream_TransportStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_IOStream_serviceDesc.Streams[0], c.cc, "/iostream.IOStream/TransportStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &iOStreamTransportStreamClient{stream}
	return x, nil
}

type IOStream_TransportStreamClient interface {
	Send(*TransportPDU) error
	Recv() (*TransportPDU, error)
	grpc.ClientStream
}

type iOStreamTransportStreamClient struct {
	grpc.ClientStream
}

func (x *iOStreamTransportStreamClient) Send(m *TransportPDU) error {
	return x.ClientStream.SendMsg(m)
}

func (x *iOStreamTransportStreamClient) Recv() (*TransportPDU, error) {
	m := new(TransportPDU)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for IOStream service

type IOStreamServer interface {
	// TransportStream starts a bi-directional, multi-channel streaming
	// transport between the RPC client and the aggregator.
	TransportStream(IOStream_TransportStreamServer) error
}

func RegisterIOStreamServer(s *grpc.Server, srv IOStreamServer) {
	s.RegisterService(&_IOStream_serviceDesc, srv)
}

func _IOStream_TransportStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(IOStreamServer).TransportStream(&iOStreamTransportStreamServer{stream})
}

type IOStream_TransportStreamServer interface {
	Send(*TransportPDU) error
	Recv() (*TransportPDU, error)
	grpc.ServerStream
}

type iOStreamTransportStreamServer struct {
	grpc.ServerStream
}

func (x *iOStreamTransportStreamServer) Send(m *TransportPDU) error {
	return x.ServerStream.SendMsg(m)
}

func (x *iOStreamTransportStreamServer) Recv() (*TransportPDU, error) {
	m := new(TransportPDU)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _IOStream_serviceDesc = grpc.ServiceDesc{
	ServiceName: "iostream.IOStream",
	HandlerType: (*IOStreamServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TransportStream",
			Handler:       _IOStream_TransportStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "iostream.proto",
}

func init() { proto.RegisterFile("iostream.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 220 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcb, 0xcc, 0x2f, 0x2e,
	0x29, 0x4a, 0x4d, 0xcc, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x80, 0xf1, 0x95, 0xb6,
	0x30, 0x72, 0xf1, 0x84, 0x14, 0x25, 0xe6, 0x15, 0x17, 0xe4, 0x17, 0x95, 0x04, 0xb8, 0x84, 0x0a,
	0xc9, 0x70, 0x71, 0x26, 0x67, 0x24, 0xe6, 0xe5, 0xa5, 0xe6, 0x78, 0xba, 0x48, 0x30, 0x2a, 0x30,
	0x6a, 0xb0, 0x06, 0x21, 0x04, 0x84, 0x84, 0xb8, 0x58, 0x52, 0x12, 0x4b, 0x12, 0x25, 0x98, 0x14,
	0x18, 0x35, 0x78, 0x82, 0xc0, 0x6c, 0x21, 0x1b, 0x2e, 0x4e, 0x10, 0x1d, 0x5f, 0x52, 0x59, 0x90,
	0x2a, 0xc1, 0xac, 0xc0, 0xa8, 0xc1, 0x67, 0x24, 0xaf, 0x07, 0xb7, 0x10, 0xd9, 0x70, 0x3d, 0x97,
	0xc4, 0x92, 0xc4, 0x90, 0xca, 0x82, 0xd4, 0x20, 0x8e, 0x14, 0x28, 0x4b, 0xc9, 0x84, 0x8b, 0x03,
	0x26, 0x2a, 0xc4, 0xc1, 0xc5, 0xe2, 0x17, 0xea, 0xe3, 0x23, 0xc0, 0x20, 0xc4, 0xcd, 0xc5, 0xee,
	0xe2, 0x18, 0xe2, 0x18, 0x1f, 0x12, 0x21, 0xc0, 0x28, 0x24, 0xc8, 0xc5, 0x0b, 0xe5, 0xc4, 0x3b,
	0xfb, 0xf8, 0x07, 0xbb, 0x0a, 0x30, 0x19, 0x05, 0x73, 0x71, 0x78, 0xfa, 0x07, 0x83, 0x6d, 0x10,
	0x72, 0xe7, 0xe2, 0x87, 0x5b, 0x02, 0x15, 0x12, 0xc3, 0x6e, 0xbf, 0x14, 0x0e, 0x71, 0x25, 0x06,
	0x0d, 0x46, 0x03, 0x46, 0x27, 0xae, 0x28, 0x78, 0xb8, 0x24, 0xb1, 0x81, 0x03, 0xca, 0x18, 0x10,
	0x00, 0x00, 0xff, 0xff, 0x70, 0x22, 0x38, 0xb7, 0x3a, 0x01, 0x00, 0x00,
}
